from pathlib import Path
import subprocess
import win32api


def get_short_path(path: Path) -> str:
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –ø—É—Ç—å –≤ –∫–æ—Ä–æ—Ç–∫–∏–π (8.3), –µ—Å–ª–∏ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."""
    if not path.exists():
        # –°–æ–∑–¥–∞—ë–º —Ñ–∞–π–ª-–ø—É—Å—Ç—ã—à–∫—É, –µ—Å–ª–∏ –µ–≥–æ –µ—â—ë –Ω–µ—Ç (—Ç–æ–ª—å–∫–æ –¥–ª—è .sig)
        if path.suffix == ".sig":
            path.touch()
        else:
            raise FileNotFoundError(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {path}")
    return win32api.GetShortPathName(str(path))


def sign_xml_file(xml_path: Path, output_dir: Path) -> Path:
    cryptcp_path = Path(r"C:\Program Files (x86)\Crypto Pro\CSP\cryptcp.exe")
    thumbprint = "A7C66ED56957C6912A5D54349D206E4F946524F1"

    if not xml_path.exists():
        raise FileNotFoundError(f"XML-—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {xml_path}")
    if not output_dir.exists():
        raise FileNotFoundError(f"–ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {output_dir}")
    if not cryptcp_path.exists():
        raise FileNotFoundError("–ù–µ –Ω–∞–π–¥–µ–Ω cryptcp.exe. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω CryptoPro.")

    output_file = output_dir / (xml_path.stem + ".sig")
    output_file.touch(exist_ok=True)  # –°–æ–∑–¥–∞—ë–º –∑–∞—Ä–∞–Ω–µ–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å short path

    command = [
        get_short_path(cryptcp_path),
        "-sign",
        "-der",
        "-thumbprint", thumbprint,
        "-in", get_short_path(xml_path),
        "-out", get_short_path(output_file)
    ]

    print("üß™ –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:")
    print(" ".join(f'"{x}"' for x in command))

    result = subprocess.run(command, capture_output=True, text=True)

    if result.returncode != 0:
        print("=== STDOUT ===")
        print(result.stdout)
        print("=== STDERR ===")
        print(result.stderr)
        raise RuntimeError(f"–û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∏ —Ñ–∞–π–ª–∞ (–∫–æ–¥ {result.returncode})")

    return output_file
